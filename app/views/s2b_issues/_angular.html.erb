<script>

  var scrum2b = angular.module('scrum2b', ['xeditable', 'issueService', 'issue', 'comment_issue', 'file_issue']);
  scrum2b.directive('sortable', function($http) {
    return {
      restrict: 'A',
      link: function(scope, elm, attrs) {
        var jqueryElm = $(elm[0]);
        $(jqueryElm).sortable({
          connectWith: ".connectedSortable"
        }).disableSelection()

        $(jqueryElm).on( "sortout", function( event, ui ) { 
          $('.content').find('.hide_backlog').find('.content_issue').show();
        });

        $(jqueryElm).on( "sortover", function( event, ui ) {
          $(this).addClass('background_sortover');
          $('.ui-sortable-helper').addClass('move_issue');
          $('.ui-sortable-helper').addClass('div_ui');
          a = $(this).attr('class');
          if ($('.location_start_issue').length == 0 ) {
            $("<div class='location_start_issue'></div>").insertAfter(".move_issue");
          };
          scope.check_height_max_angular(scope.versionSelected.id);
        });

        $(jqueryElm).on( "sortstart", function( event, ui ) {
          $('.setting').hide();
          scope.check_height_max_angular(scope.versionSelected.id);
        });

        $(jqueryElm).on( "sortout", function( event, ui ) {
          $(this).removeClass("background_sortover");
        });

        $(jqueryElm).on( "sortstop", function( event, ui ) {
           $( ".location_start_issue" ).remove();
          scope.check_height_max_angular(scope.versionSelected.id);
        });
      
        $(jqueryElm).on( "sortbeforestop", function( event, ui ) {
          var div_start = $(this).attr('id');
          var div_end = $('.move_issue').parent().attr('id');
          var issueID = $('.move_issue').attr('issue-id');
          var statusID = $('.move_issue').parent().attr('status-id');
          var versionID = $('.move_issue').parent().attr('version-id');
          $('.move_issue').removeClass('select_issue');
          $('.move_issue').removeClass('move_issue');
          $(".location_start_issue" ).remove();
          $(".ui-sortable-placeholder").remove();
          $(".background_sortover").removeClass("background_sortover");
          var issue = {"id" : issueID, "status_id" : statusID, "fixed_version_id" : versionID}
          if(statusID){
            scope.drowChangeStatus(issue);
            scope.sortStop(issueID,statusID,versionID);
          }
          if( div_start == "sortable_backlog" || div_end == "sortable_backlog"){
            scope.getNumberIssuesAfter(versionID);
          }
          scope.check_height_max_angular(scope.versionSelected.id);
        });
      }
    };
  })

  scrum2b.directive('clickSprint', function() {
    return function (scope, element, attrs) {
      element.bind("click", function () {
        scope.$apply(attrs.clickSprint);
        setTimeout(function(){
          scope.check_height_max_angular(scope.versionSelected.id);
        }, 1);
      })
    }
  });

  scrum2b.directive('addNewIssue', function() {
    return function (scope, element, attrs) {
      element.bind("click", function () {
        scope.$apply(attrs.addNewIssue);
        $('.add_new_issue').hide();
        $('.add_new_issue form').trigger("reset");
        element.parent().parent().find('.add_new_issue').show();
      })
    }
  });

  scrum2b.directive('submitAddNewIssue', function() {
    return function (scope, element, attrs) {
      element.bind("submit", function () {
        scope.$apply(attrs.submitAddNewIssue);
        setTimeout(function(){
          scope.check_height_max_angular(scope.versionSelected.id);
        }, 500);
      })
    }
  });

  scrum2b.directive('submitEditIssue', function() {
    return function (scope, element, attrs) {
      element.bind("submit", function () {
        scope.$apply(attrs.submitEditIssue);
        setTimeout(function(){
          scope.check_height_max_angular(scope.versionSelected.id);
        }, 500);
      })
    }
  });

  scrum2b.directive('clickSprint', function() {
    return function (scope, element, attrs) {
      if (scope.$last) setTimeout(function(){
        scope.check_height_max_angular(scope.versionSelected.id);
      }, 1);
    }
  });

  scrum2b.directive('deleteIssue', function() {
    return function (scope, element, attrs) {
      msg = "<%= l(:label_message_are_you_sure) %>"
      element.bind("click", function () {
        if (window.confirm(msg)){
          scope.$apply(attrs.deleteIssue);
          setTimeout(function(){
            scope.check_height_max_angular(scope.versionSelected.id);
          }, 500);
        }
      })
    }
  });

  scrum2b.directive('activeShowBacklog', function() {
    return function (scope, element, attrs) {
      element.bind("click", function () {
        scope.$apply(attrs.activeShowBacklog);
        element.hide();
        $('.s2b_column_4').removeClass('hide_backlog');
        $('.closed_backlog').show();
        $('.content').removeClass('full_mode');
        $('.content').removeClass('basic_mode');
        $('.content').addClass('backlog_mode');
        $('.sprint_total').addClass('width_75');
        $('.normal_mode').removeClass('normal_mode');
        $('.sprint_total').find('.s2b_column_4').addClass('width_33');
        $('.add_new_issue').hide();
        $('.issue_closed').hide();
        $('.open_sprint_closed').hide();
        $('.see-detail-sprint').removeClass('padding-see-detail');
        scope.check_height_max_angular(scope.versionSelected.id);
      })
    }
  });

  scrum2b.directive('hideBacklog', function() {
    return function (scope, element, attrs) {
      element.bind("click", function () {
        scope.$apply(attrs.hideBacklog);
        element.hide();
        $('.s2b_column_4').addClass('hide_backlog');
        $('.icon_backlog').show();
        $('.content').removeClass('backlog_mode');
        $('.content').addClass('full_mode');
        $('.content').find('.sprint_total').removeClass('width_75');
        $('.content').find('.sprint_total').find('.s2b_column_4').removeClass('width_33');
        $('.content').find('.sprint_total').find('.s2b_column_4').removeClass('s2b_column_5');
        $('.issue_closed').show();
        $('.add_new_issue').hide();
        scope.check_height_max_angular(scope.versionSelected.id);
      })
    }
  });

  scrum2b.directive('issueSelect', function() {
    return function (scope, element, attrs) {
      element.bind("click", function () {
        if ( $( ".content" ).find(".issue").hasClass( "select_issue" ) ) {
          var status = $('.select_issue').first().parent().attr('status-id');
          var version = $('.select_issue').first().parent().attr('version-id');
          var status_id = $(this).parent().parent().attr('status-id');
          var version_id = $(this).parent().parent().attr('version-id');
          
          if (status_id == status && version_id == version ) {
            $(this).parent().toggleClass('select_issue');
          }else{
            var answer = confirm ("<%= l(:label_you_have_selected_in_other_column) %>")
            if (answer){
              $('.select_issue').removeClass('select_issue');
              $(this).parent().addClass('select_issue');
            }
          };
        }else{
          $(this).parent().toggleClass('select_issue');
        };
      })
    }
  });

  scrum2b.directive('deleteManyIssue', function() {
    return function (scope, element, attrs) {
      element.bind("click", function () {
        alert(33);  
        $( ".content .select_issue" ).each(function(){
          alert($(this).attr('issue-id'));
        });

      })
    }
  });

</script>